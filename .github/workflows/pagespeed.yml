name: PageSpeed Insights Automation

on:
  schedule:
    - cron: '0 0 * * *'
  workflow_dispatch:

jobs:
  run-pagespeed:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        url: 
          - 'https://www.kfc.co.jp/'
          - 'https://www.mcdonalds.co.jp/'
          - 'https://www.burgerking.co.jp/'

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: run-pagespeed
        id: run-pagespeed
        uses: ./
        with:
          url: ${{ matrix.url }}
          key: ${{ secrets.GOOGLE_PSI }}

      - name: Output PageSpeed Metrics
        id: output_metrics
        run: |
          echo "***************************************************************"
          echo "URL: ${{ matrix.url }}"
          echo "***************************************************************"
          echo "🌐 デスクトップ メトリクス"
          echo "***************************************************************"
          echo "📊 デスクトップ パフォーマンス: ${{ steps.run-pagespeed.outputs.desktop-score }}"
          echo "LCP (最大コンテンツ塗り): ${{ steps.run-pagespeed.outputs.desktop-largest-contentful-paint }}"
          echo "CLS (累積レイアウトシフト): ${{ steps.run-pagespeed.outputs.desktop-cumulative-layout-shift }}"
          echo "FCP (ファーストコンテンツ塗り): ${{ steps.run-pagespeed.outputs.desktop-first-contentful-paint }}"
          echo "TBT (総ブロッキング時間): ${{ steps.run-pagespeed.outputs.desktop-total-blocking-time }}"
          echo "SI (スピードインデックス): ${{ steps.run-pagespeed.outputs.desktop-speed-index }}"
          echo "***************************************************************"
          echo "📱 モバイル メトリクス"
          echo "***************************************************************"
          echo "📊 モバイル パフォーマンス: ${{ steps.run-pagespeed.outputs.mobile-score }}"
          echo "LCP (最大コンテンツ塗り): ${{ steps.run-pagespeed.outputs.mobile-largest-contentful-paint }}"
          echo "CLS (累積レイアウトシフト): ${{ steps.run-pagespeed.outputs.mobile-cumulative-layout-shift }}"
          echo "FCP (ファーストコンテンツ塗り): ${{ steps.run-pagespeed.outputs.mobile-first-contentful-paint }}"
          echo "TBT (総ブロッキング時間): ${{ steps.run-pagespeed.outputs.mobile-total-blocking-time }}"
          echo "SI (スピードインデックス): ${{ steps.run-pagespeed.outputs.mobile-speed-index }}"
          echo "***************************************************************"
          
          # Prepare the message for Microsoft Teams
          MESSAGE="Daily PageSpeed Metrics for [${{ matrix.url }}](${{ matrix.url }}):\n"
          MESSAGE+="| Metric                     | Desktop                   | Mobile                    |\n"
          MESSAGE+="|----------------------------|---------------------------|---------------------------|\n"
          MESSAGE+="| **Performance Score**      | ${{ steps.run-pagespeed.outputs.desktop-score }}%  | ${{ steps.run-pagespeed.outputs.mobile-score }}%  |\n"
          MESSAGE+="| **LCP**                    | ${{ steps.run-pagespeed.outputs.desktop-largest-content-paint }} s ms  | ${{ steps.run-pagespeed.outputs.mobile-largest-content-paint }} s ms  |\n"
          MESSAGE+="| **CLS**                    | ${{ steps.run-pagespeed.outputs.desktop-cumulative-layout-shift }}  | ${{ steps.run-pagespeed.outputs.mobile-cumulative-layout-shift }}  |\n"
          MESSAGE+="| **FCP**                    | ${{ steps.run-pagespeed.outputs.desktop-first-contentful-paint }} s ms  | ${{ steps.run-pagespeed.outputs.mobile-first-contentful-paint }} s ms  |\n"
          MESSAGE+="| **TBT**                    | ${{ steps.run-pagespeed.outputs.desktop-total-blocking-time }} ms  | ${{ steps.run-pagespeed.outputs.mobile-total-blocking-time }} ms  |\n"
          MESSAGE+="| **SI**                     | ${{ steps.run-pagespeed.outputs.desktop-speed-index }} s ms  | ${{ steps.run-pagespeed.outputs.mobile-speed-index }} s ms  |\n"

          echo "MESSAGE<<EOF" >> $GITHUB_ENV
          echo "$MESSAGE" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Send Metrics to Microsoft Teams
        env:
          WEBHOOK_URL: ${{ secrets.TEAMS_WEBHOOK_URL }}
        run: |
          curl -H "Content-Type: application/json" -d '{
            "text": "${{ env.MESSAGE }}"
          }' $WEBHOOK_URL
